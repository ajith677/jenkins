pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'springboot-app'
        IMAGE_TAG = '23'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/ajith677/jenkins.git'
            }
        }


        stage('Build') {
            steps {
                dir('demo') {
                    sh 'gradle clean package -DskipTests=false'
                }
            }
        }

        stage('Test') {
            steps {
                dir('demo') {
                    sh 'gradle test'
                }
            }
        }
         stage('sonar') {
                    steps {
                        dir('demo') {
                            sh 'gradle sonarqube \
                                  -Dsonar.token=squ_4e04534d3d71ebc95d5b7ecfda872a05ad3bf7c7 \
                                  -Dsonar.host.url=http://localhost:9000'

                        }
                    }
                }


        stage('Build Docker Image') {
            steps {
                dir('demo') {
                    sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ."
                }
            }
        }

//         // Optional: Uncomment if you want to push the image to a registry
//         /*
//         stage('Push Docker Image') {
//             steps {
//                 script {
//                     docker.withRegistry('https://index.docker.io/v1/', REGISTRY_CREDENTIALS) {
//                         sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
//                     }
//                 }
//             }
//         }
//         */

        stage('Deploy') {
            steps {
                script {
                    sh 'docker stop springboot-app || true'
                    sh 'docker rm springboot-app || true'
                    sh "docker run -d --name springboot-app -p 8081:8081 ${DOCKER_IMAGE}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        success {
            echo '✅ Application deployed successfully!'
        }
        failure {
            echo '❌ Deployment failed.'
        }
    }
}